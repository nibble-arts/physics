//var gl;
var table ;

function load() {
	var scene = new Array;
	var obj;
	
	var canvas = document.getElementById("table");
	table = canvas.getContext("2d");

	obj = new Object("test");
	obj.rect(-50,-25,100,50,{ color:"#f0ffff" });
	obj.pos(200,50);
	obj.rot(0);

	scene.push(obj);
	
	obj = new Object("test");
	obj.rect(-20,-20,40,40,{ color:"#fffff0" });
	obj.pos(100,50);
	obj.rot(-20);

	scene.push(obj);

console.dir(scene);

	draw(table,scene);
}


function Object(name,option) {
	this.name = name;

	this.px = 0;
	this.py = 0;
	this.r = 0;
	this.show = true;
	this.length = 0;
}

Object.prototype.rect = function (x,y,width,height,option) {
	this.form = {
		x: x,
		y: y,
		width: width,
		height: height,
		type: "rect"
	}

	if (option) {
		if (option.color) this.form.color = option.color;
		
	}
}

Object.prototype.pos = function(px,py,option) {
	this.px = px;
	this.py = py;
}

Object.prototype.rot = function(r,option) {
	this.r = r;
}

Object.prototype.fade = function(option) {
	if (option) {
// set animation length
		(option.length) ? this.length = option.length:this.length = 0;

// set type of fade
		switch (option.type) {
			case "in":
				this.show = true;
				break;
			case "out":
				this.show = false;
				break;
		}
	}
	else
		(this.show) ? this.show = false:this.show = true;
}

function draw (canvas,scene) {
	$.each(scene, function() {

//		canvas.translate(this.px,this.py);
		canvas.rotate(this.r * Math.PI/180);

		switch(this.form.type) {
			case "rect":
				canvas.fillStyle = this.form.color;
				canvas.fillRect(this.form.x + this.px,this.form.y + this.py,this.form.width,this.form.height);
				break;

			case "circle":
				break;

			case "line":
				break;
		}
	});
}

